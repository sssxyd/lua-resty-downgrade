
events {
    worker_connections  1024;
}

stream {

}

http {
    include       mime.types;
    charset utf-8;
    log_escape_non_ascii off;
    default_type  application/octet-stream;
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  30s;
    types_hash_max_size 4096;
    client_max_body_size 20m;
    underscores_in_headers on;    
    gzip  on;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format timed '[$time_local] $remote_addr "$request" $status '
                     'req_len:$request_length resp_len:$body_bytes_sent '
                     'req_time:$request_time upstream_time:$upstream_response_time';

    access_log  logs/access.log  main;

    # 透传真实IP
    proxy_set_header  Host $host:$server_port;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header  X-Real-PORT $remote_port;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

    upstream http_yfw_java {
        server 127.0.0.1:18080 weight=2;
    }

    upstream http_oms_java {
        server 127.0.0.1:18888 weight=2;
    }    

    # 设置健康检测用的缓存内存块
    lua_shared_dict healthcheck 10m;
    lua_shared_dict downgrade 10m;
    lua_socket_log_errors off;

    init_by_lua_block {
        -- # 加载规则，第一个参数是规则文件路径，第二个参数是命名空间，可加载多个规则文件
        local downgrade = require("resty.downgrade")
        downgrade.load_rules("/path/to/yfw_downgrade_routers.toml", "yfw")
        downgrade.load_rules("/path/to/oms_downgrade_routers.toml", "oms")
    }

    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        -- # 对药房网java服务做健康检测
        local ok_yfw, err_yfw = hc.spawn_checker{
            shm = "healthcheck",         -- # 缓存名称  
            upstream = "http_yfw_java",  -- # upstream 名称
            type = "http",               -- # 协议类型

            -- # 检测地址
            http_req = "GET /4000/4000/1/guest.common.app.getServerDatetime HTTP/1.1\r\nHost: api.yfw.com\r\n\r\n",
            port = nil,              -- # 检测端口，nil表示用upstream里配置的
            interval = 2000,         -- # 每X毫秒检测一次
            timeout = 1000,          -- # 检测请求的timeout时间是X毫秒
            fall = 3,                -- # X次检测成功后，将被检测的服务器，上架
            rise = 2,                -- # X次检测失败后，将被检测的服务器，下架
            valid_statuses = {200},  -- # 被认为成功的HTTP状态码
            concurrency = 10,        -- # 检测并发级别，每个线程可以同时发送X个检测请求
        }

        -- # 对视塔的OMS的java服务做健康检测
        local ok_oms, err_oms = hc.spawn_checker{
            shm = "healthcheck",         -- # 缓存名称  
            upstream = "http_oms_java",  -- # upstream 名称
            type = "http",               -- # 协议类型

            -- # 检测地址
            http_req = "POST /erpmiddle/ThirdShop/getById/1 HTTP/1.1\r\nHost: api.oms.com\r\n\r\n",
            port = nil,              -- # 检测端口，nil表示用upstream里配置的
            interval = 2000,         -- # 每X毫秒检测一次
            timeout = 1000,          -- # 检测请求的timeout时间是X毫秒
            fall = 3,                -- # X次检测成功后，将被检测的服务器，上架
            rise = 2,                -- # X次检测失败后，将被检测的服务器，下架
            valid_statuses = {200},  -- # 被认为成功的HTTP状态码
            concurrency = 10,        -- # 检测并发级别，每个线程可以同时发送X个检测请求
        }

        if not ok_yfw then
            ngx.log(ngx.ERR, "failed to spawn health checker of yfw java: ", err_yfw)
        end

        if not ok_oms then
            ngx.log(ngx.ERR, "failed to spawn health checker of oms java: ", err_oms)
        end
    }

    include conf.d/*.conf;

}
